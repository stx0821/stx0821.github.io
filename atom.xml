<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梅天能のノート</title>
  
  <subtitle>梅天能のノート</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-31T08:41:27.654Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>梅天能</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux笔记</title>
    <link href="http://yoursite.com/2016/10/05/linux-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0/"/>
    <id>http://yoursite.com/2016/10/05/linux-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0/</id>
    <published>2016-10-05T02:29:06.000Z</published>
    <updated>2019-01-31T08:41:27.654Z</updated>
    
    <content type="html"><![CDATA[<p>VMware 使用桥接时，会占用局域网IP，NAT不会，host only不能连网</p><p>递归创建目录mkdir -p dir/b，rmdir并不怎么使用，删除目录使用rm -rf dir/</p><p>移动、重命名目录不需要额外的参数 mv<br><a id="more"></a></p><p>复制目录需要cp -r，如果需要连目录的修改时间等属性一起复制cp -a，复制出来的就会和源一模一样</p><p>不推荐使用硬链接，使用软链接时，必须使用绝对路径，windows的Documents and Settings和Users使用的应该是联接mklink /J link target</p><p>updatedb命令用于更新locate搜索的数据库，搜索规则的配置文件在/etc/updatedb.conf</p><p>find / -iname ab.txt</p><p>find / -mtime -10</p><p>find / -size 10M</p><p>find / -size +20k -a -size -50k -exec ls -lh {} \;</p><p>常用目录:/etc/sysconfig/network-scripts/ifcfg-eth0  网卡配置</p><p>/etc/resolv.conf  DNS配置</p><p>下面是linux系统约定不同类型文件默认的颜色：<br>白色：表示普通文件<br>蓝色：表示目录<br>绿色：表示可执行文件<br>红色：表示压缩文件<br>浅蓝色：链接文件<br>红色闪烁：表示链接的文件有问题<br>黄色：表示设备文件</p><p>tar -zcvf a.tar.gz a</p><p>挂载光盘：mount /dev/sr0 /mnt/cd/</p><p>查看分区表：fdisk -l</p><p>挂载U盘：mount /dev/sdb1 /mnt/usb/</p><p>卸载文件系统：umount /mnt/cd</p><p>用户登录查看命令：w who last lastlog</p><p>! history ID 可以执行对应的历史命令</p><p>! history string 可以执行对应的最后一条历史命令</p><p>Ctrl + r 查找历史命令</p><p>ll &amp;&gt;&gt; 1.txt 无论正确错误都输出重定向</p><p>netstat -an ; route -n ; nslookup ;</p><p>tcpdump -i ens33 -nnX port 80  截获数据包</p><p>scp stx@192.168.164.137:/home/stx/t.txt ~   scp命令使用ssh来下载上传文件</p><p>ifup enp0s3(网卡名)  用于激活指定的网络接口。</p><p>命令结尾\，可以换行输入</p><p>source conf = . conf</p><p>目录权限只有0  5  7有用，其它无意义</p><p>pkill 进程名 ，杀死一组进程</p><p>jobs查看后台运行的进程</p><p>fg 工作号，可以恢复后台的进程到前台</p><p>nohup ./bin/node server.js &amp;  守护进程</p><p>cat /proc/cpuinfo   查看CPU信息  uname -a查看系统相关信息</p><p>htop 高级进程查看</p><p>rz sz 上传下载</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VMware 使用桥接时，会占用局域网IP，NAT不会，host only不能连网&lt;/p&gt;
&lt;p&gt;递归创建目录mkdir -p dir/b，rmdir并不怎么使用，删除目录使用rm -rf dir/&lt;/p&gt;
&lt;p&gt;移动、重命名目录不需要额外的参数 mv&lt;br&gt;
    
    </summary>
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 匿名函数自执行的写法与探究</title>
    <link href="http://yoursite.com/2016/06/07/javascript-e5-8c-bf-e5-90-8d-e5-87-bd-e6-95-b0-e8-87-aa-e6-89-a7-e8-a1-8c-e7-9a-84-e5-86-99-e6-b3-95-e4-b8-8e-e6-8e-a2-e7-a9-b6/"/>
    <id>http://yoursite.com/2016/06/07/javascript-e5-8c-bf-e5-90-8d-e5-87-bd-e6-95-b0-e8-87-aa-e6-89-a7-e8-a1-8c-e7-9a-84-e5-86-99-e6-b3-95-e4-b8-8e-e6-8e-a2-e7-a9-b6/</id>
    <published>2016-06-07T14:58:58.000Z</published>
    <updated>2019-02-02T06:49:23.067Z</updated>
    
    <content type="html"><![CDATA[<p>首先是正常的匿名函数自执行写法，也是最为常见的写法。</p><pre>(function(){    alert(1);})();</pre>还有通过各种运算符来将函数表达式执行并返回的，当然也可以不返回，函数照样执行。<pre>!function(){    alert(1);}();-function(){    return 1;}();typeof function(){    return 1;}();1 &amp;&amp; function(){    return 1;}();</pre>下面这种写法则是在最外层包了个`()`，这里的`()`是提升优先级，虽然只有一个表达式，但是加上`()`也不会有什么错，而且达到了自执行的效果。<pre>(function(){    alert(1);}());</pre>下面这种更让人感觉疑惑，最外层包了个`[]`，看起来就像是一个没有被赋值的数组字面量，居然也自我执行了。不错，确实数组字面量，数组字面量里要求填入的就是合法表达式（包括字面量、基本数据类型等等）。<pre>[function(){    alert(1);}()];</pre>**总结：通过以上探究，我们会发现`function(){}()`直接写肯定会报错，浏览器并不会把它当一个表达式执行，但如果是当它处在其它表达式的位置的时候就不会报错，而且函数会自我执行。**一个实际的例子。<pre>var currentDate = {    date:(function(){        var d = new Date();        return d.getDate();    })()};</pre>根据之前的总结，只要`function(){}()`是处在表达式的位置上，就不会报错而且会自执行，所以改写成如下，直接去掉`()`。<pre>var currentDate = {    date:function(){        var d = new Date();        return d.getDate();    }()};</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先是正常的匿名函数自执行写法，也是最为常见的写法。&lt;/p&gt;
&lt;pre&gt;(function(){
    alert(1);
})();
&lt;/pre&gt;
还有通过各种运算符来将函数表达式执行并返回的，当然也可以不返回，函数照样执行。
&lt;pre&gt;!function(){
   
      
    
    </summary>
    
      <category term="WEB技术" scheme="http://yoursite.com/categories/WEB%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 pattern属性是否需要^和$强制开头与结尾</title>
    <link href="http://yoursite.com/2016/05/03/html5-pattern-e5-b1-9e-e6-80-a7-e6-98-af-e5-90-a6-e9-9c-80-e8-a6-81-e5-92-8c-e5-bc-ba-e5-88-b6-e5-bc-80-e5-a4-b4-e4-b8-8e-e7-bb-93-e5-b0-be/"/>
    <id>http://yoursite.com/2016/05/03/html5-pattern-e5-b1-9e-e6-80-a7-e6-98-af-e5-90-a6-e9-9c-80-e8-a6-81-e5-92-8c-e5-bc-ba-e5-88-b6-e5-bc-80-e5-a4-b4-e4-b8-8e-e7-bb-93-e5-b0-be/</id>
    <published>2016-05-03T03:07:08.000Z</published>
    <updated>2019-02-02T06:52:09.957Z</updated>
    
    <content type="html"><![CDATA[<p>近日在写一个手机号文本输入框时，用pattern属性验证手机号是否正确发现一个细节，pattern属性里的正则表达式和编程语言里的相比，是不需要使用^和$强制开头与结尾。即使你不写^和$，浏览器在解释时，也会隐式的在开头和结尾加上，就像：<code>^(?:your pattern)$</code>这样。<br>所以下面两行代码是完全等价的。</p><p><pre>&lt;input type=”tel” name=”tel” pattern=”1[34578]\d{9}” title=”11位手机号码” required /&gt;<br>&lt;input type=”tel” name=”tel” pattern=”^1[34578]\d{9}$” title=”11位手机号码” required /&gt;<br></pre><br><a id="more"></a><br>值得一提的是<code>type=&quot;tel&quot;</code>不像<code>type=&quot;email&quot;</code>和<code>type=&quot;number&quot;</code>具有验证功能，这是W3C规定的，因为考虑到全世界类型繁多的电话号难以统一。所以在电脑上<code>type=&quot;tel&quot;</code>的效果和普通文本框没什么区别，但其实是支持<code>type=&quot;tel&quot;</code>的，如果在手机上会调出数字键盘，方便输入。<br>参考资料：<a href="https://www.w3.org/TR/2014/REC-html5-20141028/forms.html#attr-input-pattern" target="_blank" rel="noopener">https://www.w3.org/TR/2014/REC-html5-20141028/forms.html#attr-input-pattern</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近日在写一个手机号文本输入框时，用pattern属性验证手机号是否正确发现一个细节，pattern属性里的正则表达式和编程语言里的相比，是不需要使用^和$强制开头与结尾。即使你不写^和$，浏览器在解释时，也会隐式的在开头和结尾加上，就像：&lt;code&gt;^(?:your pattern)$&lt;/code&gt;这样。&lt;br&gt;所以下面两行代码是完全等价的。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&amp;lt;input type=”tel” name=”tel” pattern=”1[34578]\d{9}” title=”11位手机号码” required /&amp;gt;&lt;br&gt;&amp;lt;input type=”tel” name=”tel” pattern=”^1[34578]\d{9}$” title=”11位手机号码” required /&amp;gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;
    
    </summary>
    
      <category term="WEB技术" scheme="http://yoursite.com/categories/WEB%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
</feed>
