<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梅天能のノート</title>
  
  <subtitle>梅天能のノート</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-02T06:54:56.424Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>梅天能</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谷歌浏览器开发人员工具实用特性</title>
    <link href="http://yoursite.com/2017/09/09/e8-b0-b7-e6-ad-8c-e5-bc-80-e5-8f-91-e4-ba-ba-e5-91-98-e5-b7-a5-e5-85-b7-e5-ae-9e-e7-94-a8-e7-89-b9-e6-80-a7/"/>
    <id>http://yoursite.com/2017/09/09/e8-b0-b7-e6-ad-8c-e5-bc-80-e5-8f-91-e4-ba-ba-e5-91-98-e5-b7-a5-e5-85-b7-e5-ae-9e-e7-94-a8-e7-89-b9-e6-80-a7/</id>
    <published>2017-09-09T02:10:34.000Z</published>
    <updated>2019-02-02T06:54:56.424Z</updated>
    
    <content type="html"><![CDATA[<p>今天去<a href="https://developers.google.com/web/tools/" target="_blank" rel="noopener">https://developers.google.com/web/tools/</a> （需翻墙）重新学习了一下谷歌浏览器开发人员工具的使用，才发现原来有那么多好东西平时都没注意到，今天特别记录下。（本文图片需翻墙才能看到。）</p><h1 id="运行代码段"><a href="#运行代码段" class="headerlink" title="运行代码段"></a>运行代码段</h1><p>要创建代码段，请打开 <strong>Sources</strong> 面板，点击 <strong>Snippets</strong> 标签，在导航器中点击右键，然后选择 <strong>New</strong>。</p><p><img src="https://developers.google.com/web/tools/chrome-devtools/images/create-snippet.png" alt="创建代码段"></p><p>在编辑器中输入您的代码。如果您未保存更改，您的脚本名称旁会有一个星号，如下面的屏幕截图所示。请按 <kbd>Command</kbd>+<kbd>S</kbd>(Mac) 或 <kbd>Ctrl</kbd>+<kbd>S</kbd> （Windows、Linux）以保存您的更改。</p><p><img src="https://developers.google.com/web/tools/chrome-devtools/images/unsaved-snippet.png" alt="未保存的代码段"></p><h2 id="运行代码段-1"><a href="#运行代码段-1" class="headerlink" title="运行代码段"></a>运行代码段</h2><p>可以通过三种方式运行代码段：</p><ul><li>右键点击代码段文件名（左侧窗格列出了所有代码段），然后选择 <strong>Run</strong>。</li><li>点击 <strong>Run</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/images/run.png" alt="运行代码段按钮">)。</li><li>按 <kbd>Command</kbd>+<kbd>Enter</kbd> (Mac) 或 <kbd>Ctrl</kbd>+<kbd>Enter</kbd>（Windows、Linux）。<br>要在控制台中评估部分代码段，请突出显示这一部分，在编辑器中的任意位置右键点击，然后选择 <strong>Evaluate in Console</strong>，或使用键盘快捷键 <kbd>Command</kbd>+<kbd>Shift</kbd>+<kbd>E</kbd> (Mac) 或 <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>E</kbd>（Windows、Linux）。</li></ul><p><img src="https://developers.google.com/web/tools/chrome-devtools/images/evaluate-in-console.png" alt="在控制台中评估"></p><h2 id="查看本地修改"><a href="#查看本地修改" class="headerlink" title="查看本地修改"></a>查看本地修改</h2><p>要查看您对代码段所做修改的差异，请在编辑器中（显示代码段时）点击右键，然后选择 <strong>Local modifications</strong>。</p><p><img src="https://developers.google.com/web/tools/chrome-devtools/images/local-modifications.png" alt="本地修改"></p><p>在控制台抽屉式导航栏中会弹出名称为 <strong>History</strong> 的新标签。</p><p><img src="https://developers.google.com/web/tools/chrome-devtools/images/snippet-history.png" alt="代码段历史记录"></p><p>每个时间戳代表一次修改。展开时间戳旁的三角符号，查看那个时间点所做修改的差异。<strong>revert</strong> 链接可以移除修订历史记录。</p><p>&nbsp;</p><h1 id="常用键盘快捷键"><a href="#常用键盘快捷键" class="headerlink" title="常用键盘快捷键"></a>常用键盘快捷键</h1><p><table></table></p><p><tbody></tbody></p><p><tr></tr></p><p><td data-th="Global Shortcuts">在所有源中搜索文本</td></p><p><td data-th="Windows"><kbd class="kbd">Ctrl</kbd> + <kbd class="kbd">Shift</kbd> + <kbd class="kbd">F</kbd></td><br><br><br></p><p><table></table></p><p><tbody></tbody></p><p><tr></tr></p><p><td data-th="Code Editor">转到匹配的括号</td></p><p><td data-th="Windows"><kbd class="kbd">Ctrl</kbd> + <kbd class="kbd">M</kbd></td><br><br><br></p><p><table></table></p><p><tbody></tbody></p><p><tr></tr></p><p><td data-th="Console Shortcuts">清除控制台</td></p><p><td data-th="Windows"><kbd class="kbd">Ctrl</kbd> + <kbd class="kbd">L</kbd></td><br><br><br></p><p><table></table></p><p><tbody></tbody></p><p><tr></tr></p><p><td data-th="Emulation Shortcuts">双指张合放大和缩小</td></p><p><td data-th="Windows"><kbd class="kbd">Shift</kbd> + <kbd class="kbd">滚动</kbd></td><br><br><br><br>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天去&lt;a href=&quot;https://developers.google.com/web/tools/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developers.google.com/web/tools/&lt;/a&gt; （需翻墙）重新
      
    
    </summary>
    
      <category term="WEB技术" scheme="http://yoursite.com/categories/WEB%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux笔记</title>
    <link href="http://yoursite.com/2016/10/05/linux-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0/"/>
    <id>http://yoursite.com/2016/10/05/linux-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0/</id>
    <published>2016-10-05T02:29:06.000Z</published>
    <updated>2019-01-31T08:41:27.654Z</updated>
    
    <content type="html"><![CDATA[<p>VMware 使用桥接时，会占用局域网IP，NAT不会，host only不能连网</p><p>递归创建目录mkdir -p dir/b，rmdir并不怎么使用，删除目录使用rm -rf dir/</p><p>移动、重命名目录不需要额外的参数 mv<br><a id="more"></a></p><p>复制目录需要cp -r，如果需要连目录的修改时间等属性一起复制cp -a，复制出来的就会和源一模一样</p><p>不推荐使用硬链接，使用软链接时，必须使用绝对路径，windows的Documents and Settings和Users使用的应该是联接mklink /J link target</p><p>updatedb命令用于更新locate搜索的数据库，搜索规则的配置文件在/etc/updatedb.conf</p><p>find / -iname ab.txt</p><p>find / -mtime -10</p><p>find / -size 10M</p><p>find / -size +20k -a -size -50k -exec ls -lh {} \;</p><p>常用目录:/etc/sysconfig/network-scripts/ifcfg-eth0  网卡配置</p><p>/etc/resolv.conf  DNS配置</p><p>下面是linux系统约定不同类型文件默认的颜色：<br>白色：表示普通文件<br>蓝色：表示目录<br>绿色：表示可执行文件<br>红色：表示压缩文件<br>浅蓝色：链接文件<br>红色闪烁：表示链接的文件有问题<br>黄色：表示设备文件</p><p>tar -zcvf a.tar.gz a</p><p>挂载光盘：mount /dev/sr0 /mnt/cd/</p><p>查看分区表：fdisk -l</p><p>挂载U盘：mount /dev/sdb1 /mnt/usb/</p><p>卸载文件系统：umount /mnt/cd</p><p>用户登录查看命令：w who last lastlog</p><p>! history ID 可以执行对应的历史命令</p><p>! history string 可以执行对应的最后一条历史命令</p><p>Ctrl + r 查找历史命令</p><p>ll &amp;&gt;&gt; 1.txt 无论正确错误都输出重定向</p><p>netstat -an ; route -n ; nslookup ;</p><p>tcpdump -i ens33 -nnX port 80  截获数据包</p><p>scp stx@192.168.164.137:/home/stx/t.txt ~   scp命令使用ssh来下载上传文件</p><p>ifup enp0s3(网卡名)  用于激活指定的网络接口。</p><p>命令结尾\，可以换行输入</p><p>source conf = . conf</p><p>目录权限只有0  5  7有用，其它无意义</p><p>pkill 进程名 ，杀死一组进程</p><p>jobs查看后台运行的进程</p><p>fg 工作号，可以恢复后台的进程到前台</p><p>nohup ./bin/node server.js &amp;  守护进程</p><p>cat /proc/cpuinfo   查看CPU信息  uname -a查看系统相关信息</p><p>htop 高级进程查看</p><p>rz sz 上传下载</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VMware 使用桥接时，会占用局域网IP，NAT不会，host only不能连网&lt;/p&gt;
&lt;p&gt;递归创建目录mkdir -p dir/b，rmdir并不怎么使用，删除目录使用rm -rf dir/&lt;/p&gt;
&lt;p&gt;移动、重命名目录不需要额外的参数 mv&lt;br&gt;
    
    </summary>
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 匿名函数自执行的写法与探究</title>
    <link href="http://yoursite.com/2016/06/07/javascript-e5-8c-bf-e5-90-8d-e5-87-bd-e6-95-b0-e8-87-aa-e6-89-a7-e8-a1-8c-e7-9a-84-e5-86-99-e6-b3-95-e4-b8-8e-e6-8e-a2-e7-a9-b6/"/>
    <id>http://yoursite.com/2016/06/07/javascript-e5-8c-bf-e5-90-8d-e5-87-bd-e6-95-b0-e8-87-aa-e6-89-a7-e8-a1-8c-e7-9a-84-e5-86-99-e6-b3-95-e4-b8-8e-e6-8e-a2-e7-a9-b6/</id>
    <published>2016-06-07T14:58:58.000Z</published>
    <updated>2019-02-02T06:49:23.067Z</updated>
    
    <content type="html"><![CDATA[<p>首先是正常的匿名函数自执行写法，也是最为常见的写法。</p><pre>(function(){    alert(1);})();</pre>还有通过各种运算符来将函数表达式执行并返回的，当然也可以不返回，函数照样执行。<pre>!function(){    alert(1);}();-function(){    return 1;}();typeof function(){    return 1;}();1 &amp;&amp; function(){    return 1;}();</pre>下面这种写法则是在最外层包了个`()`，这里的`()`是提升优先级，虽然只有一个表达式，但是加上`()`也不会有什么错，而且达到了自执行的效果。<pre>(function(){    alert(1);}());</pre>下面这种更让人感觉疑惑，最外层包了个`[]`，看起来就像是一个没有被赋值的数组字面量，居然也自我执行了。不错，确实数组字面量，数组字面量里要求填入的就是合法表达式（包括字面量、基本数据类型等等）。<pre>[function(){    alert(1);}()];</pre>**总结：通过以上探究，我们会发现`function(){}()`直接写肯定会报错，浏览器并不会把它当一个表达式执行，但如果是当它处在其它表达式的位置的时候就不会报错，而且函数会自我执行。**一个实际的例子。<pre>var currentDate = {    date:(function(){        var d = new Date();        return d.getDate();    })()};</pre>根据之前的总结，只要`function(){}()`是处在表达式的位置上，就不会报错而且会自执行，所以改写成如下，直接去掉`()`。<pre>var currentDate = {    date:function(){        var d = new Date();        return d.getDate();    }()};</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先是正常的匿名函数自执行写法，也是最为常见的写法。&lt;/p&gt;
&lt;pre&gt;(function(){
    alert(1);
})();
&lt;/pre&gt;
还有通过各种运算符来将函数表达式执行并返回的，当然也可以不返回，函数照样执行。
&lt;pre&gt;!function(){
   
      
    
    </summary>
    
      <category term="WEB技术" scheme="http://yoursite.com/categories/WEB%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript5 对象&amp;数组字面量扩展</title>
    <link href="http://yoursite.com/2016/05/05/ecmascript5-e5-af-b9-e8-b1-a1-e6-95-b0-e7-bb-84-e5-ad-97-e9-9d-a2-e9-87-8f-e6-89-a9-e5-b1-95/"/>
    <id>http://yoursite.com/2016/05/05/ecmascript5-e5-af-b9-e8-b1-a1-e6-95-b0-e7-bb-84-e5-ad-97-e9-9d-a2-e9-87-8f-e6-89-a9-e5-b1-95/</id>
    <published>2016-05-05T09:52:21.000Z</published>
    <updated>2019-02-02T06:55:08.596Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAscript5 对象&amp;数组字面量扩展 Object/array literal extensions如下：</p><ol><li>Getter accessors 获取访问器</li><li>Setter accessors 设置访问器</li><li>Trailing commas in object literals 对象字面量最后一个属性后面允许出现逗号</li><li>Trailing commas in array literals 数组字面量最后一个值后面允许出现逗号</li><li>Reserved words as property names 对象属性名可以使用保留字、关键字</li></ol><h2 id="1-get-amp-set-访问器"><a href="#1-get-amp-set-访问器" class="headerlink" title="1.get&amp;set 访问器"></a>1.get&amp;set 访问器</h2><p>get&amp;set 一种获得属性值的方法，另一种设置属性值的方法，并且有自己的使用语法，可以对属性值进行预处理。</p><pre>var employee = {    set age(s){ //有且只能传递一个参数        this._age = parseInt(s); //将字符串转换成整数    },    get age(){ //不能传递任何参数        return this._age;    }}employee.age = "24岁"; console.log(employee.age); //返回数字24</pre>这条扩展使用非常多，如下图，canvas绘图API上的原型属性。[![2016-07-16_113801](http://www.mddup.com/wp-content/uploads/2016/05/2016-07-16_113801.png)](http://www.mddup.com/wp-content/uploads/2016/05/2016-07-16_113801.png)## 2.对象&amp;数组字面量最后一个属性后面允许出现逗号以前复制属性代码时，要去掉最后一个逗号，如果需要再添加属性，又得重新再加上，现在都不必那么麻烦了，相当于增强了JavaScript的容错机制。<pre>var employees = [    {        name:"Adun",        age:"24",    },    {        name:"Fenix",        age:"26",    },]</pre><h2 id="3-对象属性名可以使用保留字、关键字"><a href="#3-对象属性名可以使用保留字、关键字" class="headerlink" title="3.对象属性名可以使用保留字、关键字"></a>3.对象属性名可以使用保留字、关键字</h2><p>下面这个语法没问题，但估计也没多少人会这样干吧…</p><p><pre>var obj = {<br>    var:10, //var是关键字<br>    class:20, //class是保留字<br>}<br>console.log(obj.var + obj.class) //30<br></pre><br>参考资料：<a href="http://kangax.github.io/compat-table/es5/#es5shim" target="_blank" rel="noopener">http://kangax.github.io/compat-table/es5/#es5shim</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ECMAscript5 对象&amp;amp;数组字面量扩展 Object/array literal extensions如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Getter accessors 获取访问器&lt;/li&gt;
&lt;li&gt;Setter accessors 设置访问器&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="WEB技术" scheme="http://yoursite.com/categories/WEB%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ECMAScript" scheme="http://yoursite.com/tags/ECMAScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 pattern属性是否需要^和$强制开头与结尾</title>
    <link href="http://yoursite.com/2016/05/03/html5-pattern-e5-b1-9e-e6-80-a7-e6-98-af-e5-90-a6-e9-9c-80-e8-a6-81-e5-92-8c-e5-bc-ba-e5-88-b6-e5-bc-80-e5-a4-b4-e4-b8-8e-e7-bb-93-e5-b0-be/"/>
    <id>http://yoursite.com/2016/05/03/html5-pattern-e5-b1-9e-e6-80-a7-e6-98-af-e5-90-a6-e9-9c-80-e8-a6-81-e5-92-8c-e5-bc-ba-e5-88-b6-e5-bc-80-e5-a4-b4-e4-b8-8e-e7-bb-93-e5-b0-be/</id>
    <published>2016-05-03T03:07:08.000Z</published>
    <updated>2019-02-02T06:52:09.957Z</updated>
    
    <content type="html"><![CDATA[<p>近日在写一个手机号文本输入框时，用pattern属性验证手机号是否正确发现一个细节，pattern属性里的正则表达式和编程语言里的相比，是不需要使用^和$强制开头与结尾。即使你不写^和$，浏览器在解释时，也会隐式的在开头和结尾加上，就像：<code>^(?:your pattern)$</code>这样。<br>所以下面两行代码是完全等价的。</p><p><pre>&lt;input type=”tel” name=”tel” pattern=”1[34578]\d{9}” title=”11位手机号码” required /&gt;<br>&lt;input type=”tel” name=”tel” pattern=”^1[34578]\d{9}$” title=”11位手机号码” required /&gt;<br></pre><br><a id="more"></a><br>值得一提的是<code>type=&quot;tel&quot;</code>不像<code>type=&quot;email&quot;</code>和<code>type=&quot;number&quot;</code>具有验证功能，这是W3C规定的，因为考虑到全世界类型繁多的电话号难以统一。所以在电脑上<code>type=&quot;tel&quot;</code>的效果和普通文本框没什么区别，但其实是支持<code>type=&quot;tel&quot;</code>的，如果在手机上会调出数字键盘，方便输入。<br>参考资料：<a href="https://www.w3.org/TR/2014/REC-html5-20141028/forms.html#attr-input-pattern" target="_blank" rel="noopener">https://www.w3.org/TR/2014/REC-html5-20141028/forms.html#attr-input-pattern</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近日在写一个手机号文本输入框时，用pattern属性验证手机号是否正确发现一个细节，pattern属性里的正则表达式和编程语言里的相比，是不需要使用^和$强制开头与结尾。即使你不写^和$，浏览器在解释时，也会隐式的在开头和结尾加上，就像：&lt;code&gt;^(?:your pattern)$&lt;/code&gt;这样。&lt;br&gt;所以下面两行代码是完全等价的。&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&amp;lt;input type=”tel” name=”tel” pattern=”1[34578]\d{9}” title=”11位手机号码” required /&amp;gt;&lt;br&gt;&amp;lt;input type=”tel” name=”tel” pattern=”^1[34578]\d{9}$” title=”11位手机号码” required /&amp;gt;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;
    
    </summary>
    
      <category term="WEB技术" scheme="http://yoursite.com/categories/WEB%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 进行浮点运算的一个“bug”</title>
    <link href="http://yoursite.com/2016/03/21/javascript-e8-bf-9b-e8-a1-8c-e6-b5-ae-e7-82-b9-e8-bf-90-e7-ae-97-e7-9a-84-e4-b8-80-e4-b8-aabug/"/>
    <id>http://yoursite.com/2016/03/21/javascript-e8-bf-9b-e8-a1-8c-e6-b5-ae-e7-82-b9-e8-bf-90-e7-ae-97-e7-9a-84-e4-b8-80-e4-b8-aabug/</id>
    <published>2016-03-21T02:55:11.000Z</published>
    <updated>2019-02-02T06:54:22.724Z</updated>
    
    <content type="html"><![CDATA[<p>可能是平时用javascript不怎么做浮点运算的原因，这么明显的运算结果出错居然一直没发现过。</p><p><a href="http://www.mddup.com/wp-content/uploads/2016/03/2016-03-21_102705.png" target="_blank" rel="noopener"><img src="http://www.mddup.com/wp-content/uploads/2016/03/2016-03-21_102705.png" alt="2016-03-21_102705"></a></p><p>很难想像，这种小学生都会的小数运算减法，计算机居然会出错。</p><p>究其原因，计算机在做整数运算时是不会出错的，但一碰到小数有时候就懵了（可能是因为十进制小数不能很好转换成二进制），具体资料可以参见：<a href="http://baike.baidu.com/view/1698149.htm?fromtitle=IEEE754%E6%A0%87%E5%87%86&amp;fromid=10427270&amp;type=syn" title="IEEE754%E6%A0%87%E5%87%86&amp;fromid=10427270&amp;type=syn" target="_blank" rel="noopener">IEEE754标准</a>。</p><p>所以以后尽量避免使用浮点进行运算，减少不必要的麻烦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可能是平时用javascript不怎么做浮点运算的原因，这么明显的运算结果出错居然一直没发现过。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.mddup.com/wp-content/uploads/2016/03/2016-03-21_102705.png&quot; t
      
    
    </summary>
    
      <category term="WEB技术" scheme="http://yoursite.com/categories/WEB%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
