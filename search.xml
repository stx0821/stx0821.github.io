<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Linux笔记]]></title>
      <url>/2016/10/05/linux-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0/</url>
      <content type="html"><![CDATA[<p>VMware 使用桥接时，会占用局域网IP，NAT不会，host only不能连网</p>
<p>递归创建目录mkdir -p dir/b，rmdir并不怎么使用，删除目录使用rm -rf dir/</p>
<p>移动、重命名目录不需要额外的参数 mv<br><a id="more"></a></p>
<p>复制目录需要cp -r，如果需要连目录的修改时间等属性一起复制cp -a，复制出来的就会和源一模一样</p>
<p>不推荐使用硬链接，使用软链接时，必须使用绝对路径，windows的Documents and Settings和Users使用的应该是联接mklink /J link target</p>
<p>updatedb命令用于更新locate搜索的数据库，搜索规则的配置文件在/etc/updatedb.conf</p>
<p>find / -iname ab.txt</p>
<p>find / -mtime -10</p>
<p>find / -size 10M</p>
<p>find / -size +20k -a -size -50k -exec ls -lh {} \;</p>
<p>常用目录:/etc/sysconfig/network-scripts/ifcfg-eth0  网卡配置</p>
<p>/etc/resolv.conf  DNS配置</p>
<p>下面是linux系统约定不同类型文件默认的颜色：<br>白色：表示普通文件<br>蓝色：表示目录<br>绿色：表示可执行文件<br>红色：表示压缩文件<br>浅蓝色：链接文件<br>红色闪烁：表示链接的文件有问题<br>黄色：表示设备文件</p>
<p>tar -zcvf a.tar.gz a</p>
<p>挂载光盘：mount /dev/sr0 /mnt/cd/</p>
<p>查看分区表：fdisk -l</p>
<p>挂载U盘：mount /dev/sdb1 /mnt/usb/</p>
<p>卸载文件系统：umount /mnt/cd</p>
<p>用户登录查看命令：w who last lastlog</p>
<p>! history ID 可以执行对应的历史命令</p>
<p>! history string 可以执行对应的最后一条历史命令</p>
<p>Ctrl + r 查找历史命令</p>
<p>ll &amp;&gt;&gt; 1.txt 无论正确错误都输出重定向</p>
<p>netstat -an ; route -n ; nslookup ;</p>
<p>tcpdump -i ens33 -nnX port 80  截获数据包</p>
<p>scp stx@192.168.164.137:/home/stx/t.txt ~   scp命令使用ssh来下载上传文件</p>
<p>ifup enp0s3(网卡名)  用于激活指定的网络接口。</p>
<p>命令结尾\，可以换行输入</p>
<p>source conf = . conf</p>
<p>目录权限只有0  5  7有用，其它无意义</p>
<p>pkill 进程名 ，杀死一组进程</p>
<p>jobs查看后台运行的进程</p>
<p>fg 工作号，可以恢复后台的进程到前台</p>
<p>nohup ./bin/node server.js &amp;  守护进程</p>
<p>cat /proc/cpuinfo   查看CPU信息  uname -a查看系统相关信息</p>
<p>htop 高级进程查看</p>
<p>rz sz 上传下载</p>
]]></content>
      
        <categories>
            
            <category> 日志 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 匿名函数自执行的写法与探究]]></title>
      <url>/2016/06/07/javascript-e5-8c-bf-e5-90-8d-e5-87-bd-e6-95-b0-e8-87-aa-e6-89-a7-e8-a1-8c-e7-9a-84-e5-86-99-e6-b3-95-e4-b8-8e-e6-8e-a2-e7-a9-b6/</url>
      <content type="html"><![CDATA[<p>首先是正常的匿名函数自执行写法，也是最为常见的写法。</p>
<pre>(function(){
    alert(1);
})();
</pre>
还有通过各种运算符来将函数表达式执行并返回的，当然也可以不返回，函数照样执行。
<pre>!function(){
    alert(1);
}();

-function(){
    return 1;
}();

typeof function(){
    return 1;
}();

1 &amp;&amp; function(){
    return 1;
}();
</pre>
下面这种写法则是在最外层包了个`()`，这里的`()`是提升优先级，虽然只有一个表达式，但是加上`()`也不会有什么错，而且达到了自执行的效果。
<pre>(function(){
    alert(1);
}());
</pre>
下面这种更让人感觉疑惑，最外层包了个`[]`，看起来就像是一个没有被赋值的数组字面量，居然也自我执行了。不错，确实数组字面量，数组字面量里要求填入的就是合法表达式（包括字面量、基本数据类型等等）。
<pre>[function(){
    alert(1);
}()];
</pre>
**总结：通过以上探究，我们会发现`function(){}()`直接写肯定会报错，浏览器并不会把它当一个表达式执行，但如果是当它处在其它表达式的位置的时候就不会报错，而且函数会自我执行。**

一个实际的例子。
<pre>var currentDate = {
    date:(function(){
        var d = new Date();
        return d.getDate();
    })()
};
</pre>
根据之前的总结，只要`function(){}()`是处在表达式的位置上，就不会报错而且会自执行，所以改写成如下，直接去掉`()`。
<pre>var currentDate = {
    date:function(){
        var d = new Date();
        return d.getDate();
    }()
};
</pre>]]></content>
      
        <categories>
            
            <category> WEB技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
